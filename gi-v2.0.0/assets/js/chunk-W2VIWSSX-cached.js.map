{
  "version": 3,
  "sources": ["../../../frontend/model/notifications/nativeNotification.js"],
  "sourcesContent": ["'use strict'\nimport sbp from '@sbp/sbp'\nimport { throttle } from 'turtledash'\n\n// NOTE: since these functions don't modify contract state, it should\n//       be safe to modify them without worrying about version conflicts.\n// we throttle this because some browsers (Chrome) support change handlers\n// for both 'push' and 'notifications' permissions change events\nconst handler = throttle((status        ) => {\n  // For some reason, Safari seems to always return `'prompt'` with\n  // `Notification.permission` being correct.\n  const granted = status === 'granted' || (status === 'prompt' && Notification.permission === 'granted')\n\n  const { notificationEnabled } = sbp('state/vuex/state').settings\n  console.info(`Browser notifications have been: ${granted ? 'enabled' : 'disabled'}, notificationEnabled=${notificationEnabled}`)\n  // either report the fact that browser notification permissions have been disabled\n  // or report the fact that they've been enabled (when the user wants push notifications)\n  if (!granted || notificationEnabled) {\n    sbp('service-worker/setup-push-subscription').catch(e => {\n      console.error('[handler] Error calling service-worker/setup-push-subscription', e)\n    })\n  }\n}, 250)\n\nconst fallbackChangeListener = () => {\n  if (!Notification.permission) return\n  let oldValue = Notification.permission\n  handler(oldValue)\n  // This fallback runs when `navigator.permissions.query` isn't available\n  // It's meant to run while the tab is open to react to permission changes,\n  // and therefore it's not meant to be cleared\n  setInterval(() => {\n    const newValue = Notification.permission\n    if (oldValue !== newValue) {\n      handler((oldValue = newValue))\n    }\n  }, 1000)\n}\n\nexport const setupNativeNotificationsListeners = () => {\n  // If the required APIs for native notifications aren't available, skip setup\n  if (\n    typeof navigator !== 'object' ||\n    typeof Notification !== 'function' ||\n    typeof PushManager !== 'function' ||\n    typeof ServiceWorker !== 'function' ||\n    typeof navigator.serviceWorker !== 'object'\n  ) {\n    console.warn(\"Notifications aren't available in this browser!\")\n    return\n  }\n  const isWebkit = typeof navigator === 'object' && navigator.vendor === 'Apple Computer, Inc.'\n  if (\n    !isWebkit && // WebKit doesn't work\n    typeof navigator.permissions === 'object' &&\n    // $FlowFixMe[method-unbinding]\n    typeof navigator.permissions.query === 'function'\n  ) {\n    Promise.all([\n      navigator.permissions.query({ name: 'notifications' }),\n      navigator.permissions.query({ name: 'push', userVisibleOnly: true })\n    ]).then(\n      (statuses) => {\n        // they're both the same at the start but FF only pays attention to changes in notifications\n        handler(statuses[0].state)\n        statuses[0].addEventListener('change', () => {\n          handler(statuses[0].state)\n        }, false)\n        statuses[1].addEventListener('change', () => {\n          handler(statuses[1].state)\n        }, false)\n      }\n    ).catch((e) => {\n      console.error('Error querying notifications permission', e)\n      fallbackChangeListener()\n    })\n  } else {\n    fallbackChangeListener()\n  }\n}\n\nexport async function requestNotificationPermission (\n  { enableIfGranted }                               = { enableIfGranted: false }\n)                         {\n  if (typeof Notification !== 'function') {\n    return null\n  }\n  try {\n    const permission = await Notification.requestPermission()\n    if (enableIfGranted && permission === 'granted') {\n      sbp('state/vuex/commit', 'setNotificationEnabled', true)\n    }\n    return permission\n  } catch (e) {\n    console.error('requestNotificationPermission:', e.message)\n    return null\n  }\n}\n\n// eslint-disable-next-line require-await\nexport async function makeNotification ({ title, body, icon, path, groupID, sbpInvocation }   \n                                                                              \n                       \n )                {\n  if (typeof Notification !== 'function') return\n  if (typeof icon === 'object' && icon.manifestCid) {\n    // We only use cached files to render notifications as quickly as possible\n    const cachedArrayBuffer = await sbp('gi.db/filesCache/load', icon.manifestCid).catch((e) => {\n      console.error('[Avatar.vue] Error loading file from cache', e)\n    })\n    if (cachedArrayBuffer) {\n      // We use `data:` URLs because the SW is unable to create `blob:` URLs\n      icon = 'data:;base64,' + encodeURIComponent(Buffer.from(cachedArrayBuffer).toString('base64'))\n    }\n  }\n\n  // If not running on a SW\n  if (typeof WorkerGlobalScope !== 'function') {\n    try {\n      // $FlowFixMe[incompatible-type]\n      if (navigator.vendor === 'Apple Computer, Inc.') {\n        throw new Error('Safari requires a service worker for the notification to be displayed')\n      }\n      const notification = new Notification(title, { body, icon })\n      if (path) {\n        notification.onclick = (event) => {\n          sbp('controller/router').push({ path }).catch(console.warn)\n        }\n      }\n    } catch (e) {\n      return navigator.serviceWorker?.ready.then(registration => {\n        // $FlowFixMe\n        return registration.showNotification(title, { body, icon, data: { groupID, path, sbpInvocation } })\n      }).catch(console.warn)\n    }\n  } else {\n  // If running in a SW\n    return self.clients.matchAll({ type: 'window' }).then((clientList) => {\n      // If no window is focused, display a native notification\n      if (clientList.some(client => client.focused)) {\n        return\n      }\n      return self.registration.showNotification(title,\n        { body, icon, data: { groupID, path, sbpInvocation } }\n      ).catch(console.warn)\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": ["handler", "throttle", "status", "granted", "notificationEnabled", "esm_default", "e", "fallbackChangeListener", "oldValue", "newValue", "setupNativeNotificationsListeners", "statuses", "requestNotificationPermission", "enableIfGranted", "permission", "makeNotification", "title", "body", "icon", "path", "groupID", "sbpInvocation", "cachedArrayBuffer", "notification", "event", "registration", "clientList", "client"]
}
