{
  "version": 3,
  "sources": ["../../../frontend/views/components/ButtonSubmit.vue"],
  "sourcesContent": ["/* script */\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\nUse ButtonSubmit on buttons that will trigger an **async** action.\n\nbutton-submit(\n  @click='handleLogin'\n) Login\n\nThis will display a spinner (the loading state) on the button while the login is happening.\n\nThe button has type=\"submit\" to catch any way of form submission (ex: press Enter).\n\nThat way we don't need to use $refs on the parent.\n\n// \u274C DO NOT do this, it's INCORRECT:\nform(@submit.prevent='$refs.btnSubmit.click')\n\n// \u2705 DO this instead:\nform(@submit.prevent='')\n\n`@submit.prevent` prevents the original behavior of a form submit (page reload)\nbut it will still look for a submit element and its event handler (@click).\n\nIn this case ButtonSubmit is the submit element thanks to type=\"submit\".\nSo, when pressing Enter, buttonSubmit(@click) gets called directly too.\n\nMore details about this approach:\nhttps://github.com/okTurtles/group-income/pull/854/files#r388638068\n*/\nconst __vue_script__ = ({\n  name: 'ButtonSubmit',\n  props: {\n    disabled: Boolean,\n    type: {\n      type: String,\n      default: 'submit'\n    }\n  },\n  data: () => ({\n    ephemeral: {\n      isSubmitting: false\n    }\n  }),\n  methods: {\n    async submit (event) {\n      if (this.ephemeral.isSubmitting) {\n        return\n      }\n      this.ephemeral.isSubmitting = true\n\n      // Call the original @click handler.\n      // this.$listeners can await for async handlers.\n      // An advantage over using $emit().\n      // More at: https://stackoverflow.com/questions/60554270/vuejs-difference-between-emit-and-listeners\n      try {\n        await this.$listeners.click(event)\n      } catch (error) {\n        console.error('ButtonSubmit exception:', error)\n      }\n\n      this.ephemeral.isSubmitting = false\n    },\n    focus () {\n      // Used to focus the btn from the parent (ex:GroupCreationModal)\n      this.$refs.btn.focus()\n    }\n  },\n  computed: {\n    bindListeners () {\n      return {\n        ...this.$listeners,\n        // overrides passed @click handler with a custom @click handler\n        // so it goes through \"isSubmitting guard\"\n        click: this.submit\n      }\n    }\n  }\n}        )\n\n/* template */\nvar __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',_vm._g(_vm._b({ref:\"btn\",staticClass:\"is-loader\",attrs:{\"type\":_vm.type,\"data-loading\":_vm.ephemeral.isSubmitting,\"disabled\":_vm.disabled || _vm.ephemeral.isSubmitting}},'button',_vm.$attrs,false),_vm.bindListeners),[_vm._t(\"default\"),(_vm.ephemeral.isSubmitting)?_c('i18n',{staticClass:\"sr-only\"},[_vm._v(\"Loading\")]):_vm._e()],2)}\nvar __vue_staticRenderFns__ = []\n\n  /* style */\n  const __vue_inject_styles__ = undefined\n  /* scoped */\n  const __vue_scope_id__ = undefined\n  /* module identifier */\n  const __vue_module_identifier__ = undefined\n  /* functional template */\n  const __vue_is_functional_template__ = false\n  /* component normalizer */\n  function __vue_normalize__(\n    template, style, script,\n    scope, functional, moduleIdentifier, shadowMode,\n    createInjector, createInjectorSSR, createInjectorShadow\n  ) {\n    const component = (typeof script === 'function' ? script.options : script) || {}\n\n    // For security concerns, we use only base name in production mode.\n    component.__file = \"script>\\n\"\n\n    if (!component.render) {\n      component.render = template.render\n      component.staticRenderFns = template.staticRenderFns\n      component._compiled = true\n\n      if (functional) component.functional = true\n    }\n\n    component._scopeId = scope\n\n    if (false) {\n      let hook\n      if (false) {\n        // In SSR.\n        hook = function(context) {\n          // 2.3 injection\n          context =\n            context || // cached call\n            (this.$vnode && this.$vnode.ssrContext) || // stateful\n            (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n          // 2.2 with runInNewContext: true\n          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n            context = __VUE_SSR_CONTEXT__\n          }\n          // inject component styles\n          if (style) {\n            style.call(this, createInjectorSSR(context))\n          }\n          // register component module identifier for async chunk inference\n          if (context && context._registeredComponents) {\n            context._registeredComponents.add(moduleIdentifier)\n          }\n        }\n        // used by ssr in case component is cached and beforeCreate\n        // never gets called\n        component._ssrRegister = hook\n      }\n      else if (style) {\n        hook = shadowMode \n          ? function(context) {\n              style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot))\n            }\n          : function(context) {\n              style.call(this, createInjector(context))\n            }\n      }\n\n      if (hook !== undefined) {\n        if (component.functional) {\n          // register for functional component in vue file\n          const originalRender = component.render\n          component.render = function renderWithStyleInjection(h, context) {\n            hook.call(context)\n            return originalRender(h, context)\n          }\n        } else {\n          // inject component registration as beforeCreate hook\n          const existing = component.beforeCreate\n          component.beforeCreate = existing ? [].concat(existing, hook) : [hook]\n        }\n      }\n    }\n\n    return component\n  }\n  /* style inject */\n  \n  /* style inject SSR */\n  \n  /* style inject shadow dom */\n  \n\n  \n  const __vue_component__ = /*#__PURE__*/__vue_normalize__(\n    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },\n    __vue_inject_styles__,\n    __vue_script__,\n    __vue_scope_id__,\n    __vue_is_functional_template__,\n    __vue_module_identifier__,\n    false,\n    undefined,\n    undefined,\n    undefined\n  )\n\n  export default __vue_component__"],
  "mappings": "AA2CA,IAAMA,EAAkB,CACtB,KAAM,eACN,MAAO,CACL,SAAU,QACV,KAAM,CACJ,KAAM,OACN,QAAS,QACX,CACF,EACA,KAAM,KAAO,CACX,UAAW,CACT,aAAc,EAChB,CACF,GACA,QAAS,CACP,MAAM,OAAQC,EAAO,CACnB,GAAI,MAAK,UAAU,aAGnB,MAAK,UAAU,aAAe,GAM9B,GAAI,CACF,MAAM,KAAK,WAAW,MAAMA,CAAK,CACnC,OAASC,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,CAChD,CAEA,KAAK,UAAU,aAAe,GAChC,EACA,OAAS,CAEP,KAAK,MAAM,IAAI,MAAM,CACvB,CACF,EACA,SAAU,CACR,eAAiB,CACf,MAAO,CACL,GAAG,KAAK,WAGR,MAAO,KAAK,MACd,CACF,CACF,CACF,EAGIC,EAAiB,UAAY,CAAC,IAAIC,EAAI,KAASC,EAAGD,EAAI,eAAmBE,EAAGF,EAAI,MAAM,IAAIC,EAAG,OAAOC,EAAG,SAASF,EAAI,GAAGA,EAAI,GAAG,CAAC,IAAI,MAAM,YAAY,YAAY,MAAM,CAAC,KAAOA,EAAI,KAAK,eAAeA,EAAI,UAAU,aAAa,SAAWA,EAAI,UAAYA,EAAI,UAAU,YAAY,CAAC,EAAE,SAASA,EAAI,OAAO,EAAK,EAAEA,EAAI,aAAa,EAAE,CAACA,EAAI,GAAG,SAAS,EAAGA,EAAI,UAAU,aAAcE,EAAG,OAAO,CAAC,YAAY,SAAS,EAAE,CAACF,EAAI,GAAG,SAAS,CAAC,CAAC,EAAEA,EAAI,GAAG,CAAC,EAAE,CAAC,CAAC,EAC3bG,EAA0B,CAAC,EAGvBC,EAAwB,OAExBC,EAAmB,OAEnBC,EAA4B,OAE5BC,EAAiC,GAEvC,SAASC,EACPC,EAAUC,EAAOC,EACjBC,EAAOC,EAAYC,EAAkBC,EACrCC,EAAgBC,EAAmBC,EACnC,CACA,IAAMC,GAAa,OAAOR,GAAW,WAAaA,EAAO,QAAUA,IAAW,CAAC,EAG/E,OAAAQ,EAAU,OAAS;AAAA,EAEdA,EAAU,SACbA,EAAU,OAASV,EAAS,OAC5BU,EAAU,gBAAkBV,EAAS,gBACrCU,EAAU,UAAY,GAElBN,IAAYM,EAAU,WAAa,KAGzCA,EAAU,SAAWP,EAuDdO,CACT,CASA,IAAMC,EAAiCZ,EACrC,CAAE,OAAQT,EAAgB,gBAAiBI,CAAwB,EACnEC,EACAR,EACAS,EACAE,EACAD,EACA,GACA,OACA,OACA,MACF,EAEOe,EAAQD",
  "names": ["__vue_script__", "event", "error", "__vue_render__", "_vm", "_h", "_c", "__vue_staticRenderFns__", "__vue_inject_styles__", "__vue_scope_id__", "__vue_module_identifier__", "__vue_is_functional_template__", "__vue_normalize__", "template", "style", "script", "scope", "functional", "moduleIdentifier", "shadowMode", "createInjector", "createInjectorSSR", "createInjectorShadow", "component", "__vue_component__", "ButtonSubmit_default"]
}
