{
  "version": 3,
  "sources": ["../../../frontend/views/utils/filters.js"],
  "sourcesContent": ["import { L } from '@common/common.js'\n\nexport const toPercent = (decimal        )         => Math.floor(decimal * 100)\n\nexport const getFileExtension = (\n  name        ,\n  toUppercase          = false\n)         => {\n  const lastDotIndex = name.lastIndexOf('.')\n  const ext = lastDotIndex === -1 ? '' : name.substring(lastDotIndex + 1)\n  return toUppercase ? ext.toUpperCase() : ext.toLowerCase()\n}\n\nexport const getFileType = (\n  mimeType         = ''\n)         => {\n  return mimeType.match('image/') ? 'image' : 'non-image'\n}\n\nexport const formatBytesDecimal = (bytes        , decimals         = 2)         => {\n  if (bytes < 0 || !Number.isFinite(bytes)) return L('Invalid size')\n  else if (bytes === 0) return L('0 Bytes')\n\n  const k = 1024 // Decimal base\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  const formattedValue = parseFloat((bytes / Math.pow(k, i)).toFixed(decimals))\n  return `${formattedValue} ${sizes[i]}`\n}\n\n/**\n * this function filters `list` by `keyword`\n * `list` should be an array of objects and strings\n * if it's an array of objects, `keys` could be used to specify fields\n */\nexport const filterByKeyword = (\n  list        ,\n  keyword        ,\n  keys         = [],\n  caseSensitive          = false\n)         => {\n  if (!Array.isArray(list) || typeof keyword !== 'string') { return [] }\n\n  if (!keyword) {\n    return list\n  } else if (!caseSensitive) {\n    keyword = keyword.toUpperCase()\n  }\n\n  return list.filter(item => {\n    const values = (typeof item === 'object' ? keys.map(key => item[key]) : [item])\n      .filter(value => value !== undefined && value !== null)\n\n    for (let value of values) {\n      if (!caseSensitive) {\n        value = String(value).toUpperCase()\n      }\n      if (value.indexOf(keyword) > -1) {\n        return true\n      }\n    }\n    return false\n  })\n}\n"],
  "mappings": "+CAEO,IAAMA,EAAaC,GAA4B,KAAK,MAAMA,EAAU,GAAG,EAEjEC,EAAmB,CAC9BC,EACAC,EAAuB,KACZ,CACX,IAAMC,EAAeF,EAAK,YAAY,GAAG,EACnCG,EAAMD,IAAiB,GAAK,GAAKF,EAAK,UAAUE,EAAe,CAAC,EACtE,OAAOD,EAAcE,EAAI,YAAY,EAAIA,EAAI,YAAY,CAC3D,EAEaC,EAAc,CACzBC,EAAmB,KAEZA,EAAS,MAAM,QAAQ,EAAI,QAAU,YAGjCC,EAAqB,CAACC,EAAeC,EAAmB,IAAc,CACjF,GAAID,EAAQ,GAAK,CAAC,OAAO,SAASA,CAAK,EAAG,OAAOE,EAAE,cAAc,EAC5D,GAAIF,IAAU,EAAG,OAAOE,EAAE,SAAS,EAExC,IAAMC,EAAI,KACJC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,EAChEC,EAAI,KAAK,MAAM,KAAK,IAAIL,CAAK,EAAI,KAAK,IAAIG,CAAC,CAAC,EAGlD,MAAO,GADgB,YAAYH,EAAQ,KAAK,IAAIG,EAAGE,CAAC,GAAG,QAAQJ,CAAQ,CAAC,CACpD,IAAIG,EAAMC,CAAC,CAAC,EACtC,EAOaC,EAAkB,CAC7BC,EACAC,EACAC,EAAe,CAAC,EAChBC,EAAyB,KACd,CACX,GAAI,CAAC,MAAM,QAAQH,CAAI,GAAK,OAAOC,GAAY,SAAY,MAAO,CAAC,EAEnE,GAAKA,EAEOE,IACVF,EAAUA,EAAQ,YAAY,OAF9B,QAAOD,EAKT,OAAOA,EAAK,OAAOI,GAAQ,CACzB,IAAMC,GAAU,OAAOD,GAAS,SAAWF,EAAK,IAAII,GAAOF,EAAKE,CAAG,CAAC,EAAI,CAACF,CAAI,GAC1E,OAAOG,GAAgCA,GAAU,IAAI,EAExD,QAASA,KAASF,EAIhB,GAHKF,IACHI,EAAQ,OAAOA,CAAK,EAAE,YAAY,GAEhCA,EAAM,QAAQN,CAAO,EAAI,GAC3B,MAAO,GAGX,MAAO,EACT,CAAC,CACH",
  "names": ["toPercent", "decimal", "getFileExtension", "name", "toUppercase", "lastDotIndex", "ext", "getFileType", "mimeType", "formatBytesDecimal", "bytes", "decimals", "L", "k", "sizes", "i", "filterByKeyword", "list", "keyword", "keys", "caseSensitive", "item", "values", "key", "value"]
}
