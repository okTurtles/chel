{
  "version": 3,
  "sources": ["../../../frontend/model/contracts/shared/voting/rules.js"],
  "sourcesContent": ["'use strict'\n\nimport { literalOf, unionOf } from '~/frontend/model/contracts/misc/flowTyper.js'\nimport {\n  PROPOSAL_REMOVE_MEMBER,\n  PROFILE_STATUS\n} from '../constants.js'\n\nexport const VOTE_AGAINST = ':against'\nexport const VOTE_INDIFFERENT = ':indifferent'\nexport const VOTE_UNDECIDED = ':undecided'\nexport const VOTE_FOR = ':for'\n\nexport const RULE_PERCENTAGE = 'percentage'\nexport const RULE_DISAGREEMENT = 'disagreement'\nexport const RULE_MULTI_CHOICE = 'multi-choice'\n\n// TODO: ranked-choice? :D\n\n/* REVIVEW PR\n  the whole \"state\" being passed as argument to rules[rule]() is overwhelmed.\n  It would be simpler with just 2 simple args: \"threshold\" and \"population\".\n  Advantages:\n  - population: No need to do the logic to get it (and avoid import PROFILE_STATUS.ACTIVE from group.js).\n  - threshold: The selector to get the selector is huge.\n  - tests: Avoid the need to mock a complex state.\n  My suggestion: 1 parameter (object) with 4 explicit keys.\n  [RULE_PERCENTAGE]: function ({ votes, proposalType, population, threshold })\n*/\n\nconst getPopulation = (state) => Object.keys(state.profiles).filter(p => state.profiles[p].status === PROFILE_STATUS.ACTIVE).length\n\nconst rules         = {\n  [RULE_PERCENTAGE]: function (state, proposalType, votes) {\n    votes = Object.values(votes)\n    let population = getPopulation(state)\n    if (proposalType === PROPOSAL_REMOVE_MEMBER) population -= 1\n    const defaultThreshold = state.settings.proposals[proposalType].ruleSettings[RULE_PERCENTAGE].threshold\n    const threshold = getThresholdAdjusted(RULE_PERCENTAGE, defaultThreshold, population)\n    const totalIndifferent = votes.filter(x => x === VOTE_INDIFFERENT).length\n    const totalFor = votes.filter(x => x === VOTE_FOR).length\n    const totalAgainst = votes.filter(x => x === VOTE_AGAINST).length\n    const totalForOrAgainst = totalFor + totalAgainst\n    const turnout = totalForOrAgainst + totalIndifferent\n    const absent = population - turnout\n    // TODO: figure out if this is the right way to figure out the \"neededToPass\" number\n    //       and if so, explain it in the UI that the threshold is applied only to\n    //       *those who care, plus those who were abscent*.\n    //       Those who explicitely say they don't care are removed from consideration.\n    const neededToPass = Math.ceil(threshold * (population - totalIndifferent))\n    console.debug(`votingRule ${RULE_PERCENTAGE} for ${proposalType}:`, { neededToPass, totalFor, totalAgainst, totalIndifferent, threshold, absent, turnout, population })\n    if (totalFor >= neededToPass) {\n      return VOTE_FOR\n    }\n    return totalFor + absent < neededToPass ? VOTE_AGAINST : VOTE_UNDECIDED\n  },\n  [RULE_DISAGREEMENT]: function (state, proposalType, votes) {\n    votes = Object.values(votes)\n    const population = getPopulation(state)\n    const minimumMax = proposalType === PROPOSAL_REMOVE_MEMBER ? 2 : 1\n    const thresholdOriginal = Math.max(state.settings.proposals[proposalType].ruleSettings[RULE_DISAGREEMENT].threshold, minimumMax)\n    const threshold = getThresholdAdjusted(RULE_DISAGREEMENT, thresholdOriginal, population)\n    const totalFor = votes.filter(x => x === VOTE_FOR).length\n    const totalAgainst = votes.filter(x => x === VOTE_AGAINST).length\n    const turnout = votes.length\n    const absent = population - turnout\n\n    console.debug(`votingRule ${RULE_DISAGREEMENT} for ${proposalType}:`, { totalFor, totalAgainst, threshold, turnout, population, absent })\n    if (totalAgainst >= threshold) {\n      return VOTE_AGAINST\n    }\n    // consider proposal passed if more vote for it than against it and there aren't\n    // enough votes left to tip the scales past the threshold\n    return totalAgainst + absent < threshold ? VOTE_FOR : VOTE_UNDECIDED\n  },\n  [RULE_MULTI_CHOICE]: function (state, proposalType, votes) {\n    throw new Error('unimplemented!')\n    // TODO: return VOTE_UNDECIDED if 0 votes, otherwise value w/greatest number of votes\n    //       the proposal/poll is considered passed only after the expiry time period\n    // NOTE: are we sure though that this even belongs here as a voting rule...?\n    //       perhaps there could be a situation were one of several valid settings options\n    //       is being proposed... in effect this would be a plurality voting rule\n  }\n}\n\nexport default rules\n\nexport const ruleType      = unionOf(...Object.keys(rules).map(k => literalOf(k)))\nexport const voteType      = unionOf(...[VOTE_AGAINST, VOTE_INDIFFERENT, VOTE_UNDECIDED, VOTE_FOR].map(v => literalOf(v)))\n\n/**\n *\n * @example ('disagreement', 2, 1) => 2\n * @example ('disagreement', 5, 1) => 3\n * @example ('disagreement', 7, 10) => 7\n * @example ('disagreement', 20, 10) => 10\n *\n * @example ('percentage', 0.5, 3) => 0.5\n * @example ('percentage', 0.1, 3) => 0.33\n * @example ('percentage', 0.1, 10) => 0.2\n * @example ('percentage', 0.3, 10) => 0.3\n */\nexport const getThresholdAdjusted = (rule        , threshold        , groupSize        )         => {\n  const groupSizeVoting = Math.max(3, groupSize) // 3 = minimum groupSize to vote\n\n  return {\n    [RULE_DISAGREEMENT]: () => {\n      // Limit number of maximum \"no\" votes to group size\n      return Math.min(groupSizeVoting - 1, threshold)\n    },\n    [RULE_PERCENTAGE]: () => {\n      // Minimum threshold correspondent to 2 \"yes\" votes\n      const minThreshold = 2 / groupSizeVoting\n      return Math.max(minThreshold, threshold)\n    }\n  }[rule]()\n}\n\n/**\n *\n * @example (10, 0.5) => 5\n * @example (3, 0.8) => 3\n * @example (1, 0.6) => 2\n */\nexport const getCountOutOfMembers = (groupSize        , decimal        )         => {\n  const minGroupSize = 3 // when group can vote\n  return Math.ceil(Math.max(minGroupSize, groupSize) * decimal)\n}\n\nexport const getPercentFromDecimal = (decimal        )         => {\n  // convert decimal to percentage avoiding weird decimals results.\n  // e.g. 0.58 -> 58 instead of 57.99999\n  return Math.round(decimal * 100)\n}\n"],
  "mappings": "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",
  "names": ["VOTE_AGAINST", "VOTE_INDIFFERENT", "VOTE_UNDECIDED", "VOTE_FOR", "RULE_PERCENTAGE", "RULE_DISAGREEMENT", "RULE_MULTI_CHOICE", "getPopulation", "state", "p", "PROFILE_STATUS", "rules", "proposalType", "votes", "population", "PROPOSAL_REMOVE_MEMBER", "defaultThreshold", "threshold", "getThresholdAdjusted", "totalIndifferent", "x", "totalFor", "totalAgainst", "turnout", "absent", "neededToPass", "minimumMax", "thresholdOriginal", "ruleType", "unionOf", "rules", "k", "literalOf", "voteType", "VOTE_AGAINST", "VOTE_INDIFFERENT", "VOTE_UNDECIDED", "VOTE_FOR", "v", "getThresholdAdjusted", "rule", "threshold", "groupSize", "groupSizeVoting", "RULE_DISAGREEMENT", "RULE_PERCENTAGE", "minThreshold", "getCountOutOfMembers", "decimal", "getPercentFromDecimal"]
}
