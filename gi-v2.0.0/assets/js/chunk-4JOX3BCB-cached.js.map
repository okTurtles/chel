{
  "version": 3,
  "sources": ["../../../frontend/model/settings/colors.js", "../../../frontend/views/utils/colorsManipulation.js"],
  "sourcesContent": ["export default {\n  'light': {\n    'name': 'light',\n    'theme': 'light',\n    primary_0: '#0288d1',\n    primary_1: '#b3dbf2',\n    primary_2: '#e5f3fA',\n    success_0: '#40854f',\n    success_1: '#bfd4c3',\n    success_2: '#e4f1e7',\n    warning_0: '#ff6f00',\n    warning_0_text: '#73492a',\n    warning_1: '#ffcea8',\n    warning_2: '#ffeee0',\n    danger_0: '#c62828',\n    danger_1: '#ebb3b3',\n    danger_2: '#faebeb',\n    danger_3: '#c62828',\n    text_0: '#363636',\n    text_1: '#707070',\n    general_0: '#dbdbdb',\n    general_1: '#ededed',\n    general_2: '#f5f5f5',\n    background_0: '#ffffff'\n  },\n  'dark': {\n    'name': 'dark',\n    'theme': 'dark',\n    primary_0: '#2CB1E5',\n    primary_1: '#637D87',\n    primary_2: '#3D5965',\n    success_0: '#7BD199',\n    success_1: '#647A70',\n    success_2: '#29593A',\n    warning_0: '#F28A2B',\n    warning_1: '#615850',\n    warning_2: '#825E3D',\n    danger_0: '#FF938C',\n    danger_1: '#807474',\n    danger_2: '#5F3A38',\n    danger_3: '#FF4B40',\n    text_0: '#E8E8E8',\n    text_1: '#AEAEAE',\n    general_0: '#717879',\n    general_1: '#1E2021',\n    general_2: '#2E3032',\n    background_0: '#383C3E'\n  }\n  // 'green': {\n  //   'name': 'green',\n  //   'theme': 'light',\n  //   primary_0: '#0288d1',\n  //   primary_1: '#b3dbf2',\n  //   primary_2: '#e5f3fA',\n  //   success_0: '#40854f',\n  //   success_1: '#bfd4c3',\n  //   success_2: '#e4f1e7',\n  //   warning_0: '#ff6f00',\n  //   warning_1: '#ffcea8',\n  //   warning_2: '#ffeee0',\n  //   danger_0: '#c62828',\n  //   danger_1: '#ebb3b3',\n  //   danger_2: '#faebeb',\n  //   text_0: '#363636',\n  //   text_1: '#7a7a7a',\n  //   general_0: '#dbdbdb',\n  //   general_1: '#ededed',\n  //   general_2: '#f5f5f5',\n  //   background_0: '#ffffff'\n  // },\n  // 'yellow': {\n  //   'name': 'yellow',\n  //   'theme': 'light',\n  //   primary_0: '#0288d1',\n  //   primary_1: '#b3dbf2',\n  //   primary_2: '#e5f3fA',\n  //   success_0: '#40854f',\n  //   success_1: '#bfd4c3',\n  //   success_2: '#e4f1e7',\n  //   warning_0: '#ff6f00',\n  //   warning_1: '#ffcea8',\n  //   warning_2: '#ffeee0',\n  //   danger_0: '#c62828',\n  //   danger_1: '#ebb3b3',\n  //   danger_2: '#faebeb',\n  //   text_0: '#363636',\n  //   text_1: '#7a7a7a',\n  //   general_0: '#dbdbdb',\n  //   general_1: '#ededed',\n  //   general_2: '#f5f5f5',\n  //   background_0: '#ffffff'\n  // }\n}\n", "'use strict'\n\nexport default {\n  methods: {\n    // Takes colors in hex format (i.e. #F06D06)\n    // and lightens or darkens them with a value\n    lightenDarkenColor (col        , amt        )      {\n      return this.HSLToHex(...this.hexToHSLDarken(col, amt))\n    },\n    // Modified version of https://stackoverflow.com/questions/21646738/convert-hex-to-rgba\n    hexToRgbA (hex        , alpha        )         {\n      let c\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        c = hex.substring(1).split('')\n        if (c.length === 3) {\n          c = [c[0], c[0], c[1], c[1], c[2], c[2]]\n        }\n        c = Number('0x' + c.join(''))\n        return `rgba(${[(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',')},${alpha})`\n      }\n      throw new Error('Bad Hexa')\n    },\n    // Modified version of https://gist.github.com/mjackson/5311256\n    HSLToHex (h        , s        , l        )         {\n      let r = 0\n      let g = 0\n      let b = 0\n      if (s === 0) {\n        r = g = b = l // achromatic\n      } else {\n        const hue2rgb = (p, q, t) => {\n          if (t < 0) t += 1\n          if (t > 1) t -= 1\n          if (t < 1 / 6) return p + (q - p) * 6 * t\n          if (t < 1 / 2) return q\n          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n          return p\n        }\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n        const p = 2 * l - q\n        r = hue2rgb(p, q, h + 1 / 3)\n        g = hue2rgb(p, q, h)\n        b = hue2rgb(p, q, h - 1 / 3)\n      }\n      const toHex = x => {\n        const hex = Math.round(x * 255).toString(16)\n        return hex.length === 1 ? '0' + hex : hex\n      }\n      return `#${toHex(r)}${toHex(g)}${toHex(b)}`\n    },\n    // Modified version of https://gist.github.com/mjackson/5311256\n    hexToHSLDarken (hex        , increase        )           {\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n      if (result === null) return [NaN, NaN, NaN]\n      let r = parseInt(result[1], 16)\n      let g = parseInt(result[2], 16)\n      let b = parseInt(result[3], 16)\n      r /= 255\n      g /= 255\n      b /= 255\n      const max = Math.max(r, g, b)\n      const min = Math.min(r, g, b)\n      let h = 0\n      let s = 0\n      let l = (max + min) / 2\n      if (max === min) {\n        h = s = 0 // achromatic\n      } else {\n        const d = max - min\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n        switch (max) {\n          case r: {\n            h = (g - b) / d + (g < b ? 6 : 0)\n            break\n          }\n          case g: {\n            h = (b - r) / d + 2\n            break\n          }\n          case b: {\n            h = (r - g) / d + 4\n            break\n          }\n        }\n        h /= 6\n      }\n      l = l + increase\n      return [h, s, l]\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["colors_default", "colorsManipulation_default", "col", "amt", "hex", "alpha", "c", "h", "s", "l", "r", "g", "b", "hue2rgb", "p", "q", "t", "toHex", "x", "increase", "result", "max", "min", "d"]
}
