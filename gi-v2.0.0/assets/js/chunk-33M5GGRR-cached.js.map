{
  "version": 3,
  "sources": ["../../../frontend/common/stringTemplate.js", "../../../frontend/common/translations.js", "../../../shared/domains/chelonia/errors.js", "../../../frontend/common/errors.js"],
  "sourcesContent": ["const nargs = /\\{([0-9a-zA-Z_]+)\\}/g\n\nexport default function template (string        , ...args       )         {\n  const firstArg = args[0]\n  // If the first rest argument is a plain object or array, use it as replacement table.\n  // Otherwise, use the whole rest array as replacement table.\n  const replacementsByKey = (\n    (typeof firstArg === 'object' && firstArg !== null)\n      ? firstArg\n      : args\n  )\n\n  return string.replace(nargs, function replaceArg (match, capture, index) {\n    // Avoid replacing the capture if it is escaped by double curly braces.\n    if (string[index - 1] === '{' && string[index + match.length] === '}') {\n      return capture\n    }\n\n    const maybeReplacement = (\n      // Avoid accessing inherited properties of the replacement table.\n      // $FlowFixMe\n      Object.prototype.hasOwnProperty.call(replacementsByKey, capture)\n        ? replacementsByKey[capture]\n        : undefined\n    )\n\n    if (maybeReplacement === null || maybeReplacement === undefined) {\n      return ''\n    }\n    return String(maybeReplacement)\n  })\n}\n", "'use strict'\n\n// since this file is loaded by common.js, we avoid circular imports and directly import\nimport sbp from '@sbp/sbp'\nimport template from './stringTemplate.js'\n\nconst defaultLanguage = 'en-US'\nconst defaultLanguageCode = 'en'\nconst defaultTranslationTable                       = {}\n\nlet currentLanguage = defaultLanguage\nlet currentLanguageCode = defaultLanguage.split('-')[0]\nlet currentTranslationTable = defaultTranslationTable\n\n/**\n * Loads the translation file corresponding to a given language.\n *\n * @param language - A BPC-47 language tag like the value\n * of `navigator.language`.\n *\n * Language tags must be compared in a case-insensitive way (\u00A72.1.1.).\n *\n * @see https://tools.ietf.org/rfc/bcp/bcp47.txt\n */\nexport default (sbp('sbp/selectors/register', {\n  'translations/init': async function init (language        )                {\n    // A language code is usually the first part of a language tag.\n    const [languageCode] = language.toLowerCase().split('-')\n\n    // No need to do anything if the requested language is already in use.\n    if (language.toLowerCase() === currentLanguage.toLowerCase()) return\n\n    // We can also return early if only the language codes match,\n    //   since we don't have culture-specific translations yet.\n    if (languageCode === currentLanguageCode) return\n\n    // Avoid fetching any resource if the requested language is the default one.\n    if (languageCode === defaultLanguageCode) {\n      currentLanguage = defaultLanguage\n      currentLanguageCode = defaultLanguageCode\n      currentTranslationTable = defaultTranslationTable\n      return\n    }\n    try {\n      currentTranslationTable = (await sbp('backend/translations/get', language)) || defaultTranslationTable\n\n      // Only set `currentLanguage` if there was no error fetching the resource.\n      currentLanguage = language\n      currentLanguageCode = languageCode\n    } catch (error) {\n      console.error(error)\n    }\n  }\n})          )\n\n/*\nExamples:\n\nSimple string:\n  i18n Hello world\n\nString with variables:\n  i18n(\n    :args='{ name: ourUsername }'\n  ) Hello {name}!\n\nString with HTML markup inside:\n  i18n(\n    :args='{ ...LTags(\"strong\", \"span\"), name: ourUsername }'\n  ) Hello {strong_}{name}{_strong}, today it's a {span_}nice day{_span}!\n  | or\n  i18n(\n    :args='{ ...LTags(\"span\"), name: \"<strong>${ourUsername}</strong>\" }'\n  ) Hello {name}, today it's a {span_}nice day{_span}!\n\nString with Vue components inside:\n  i18n(\n    compile\n    :args='{ r1: `<router-link class=\"link\" to=\"/login\">`, r2: \"</router-link>\"}'\n  ) Go to {r1}login{r2} page.\n\n## When to use LTags or write html as part of the key?\n- Use LTags when they wrap a variable and raw text. Example:\n\n  i18n(\n    :args='{ count: 5, ...LTags(\"strong\") }'\n  ) Invite {strong}{count} members{strong} to the party!\n\n- Write HTML when it wraps only the variable.\n-- That way translators don't need to worry about extra information.\n  i18n(\n    :args='{ count: \"<strong>5</strong>\" }'\n  ) Invite {count} members to the party!\n*/\n\nexport function LTags (...tags          )                  {\n  const o = {\n    'br_': '<br/>'\n  }\n  for (const tag of tags) {\n    o[`${tag}_`] = `<${tag}>`\n    o[`_${tag}`] = `</${tag}>`\n  }\n  return o\n}\n\nexport function L (\n  key        ,\n  args                          \n)         {\n  return template(currentTranslationTable[key] || key, args)\n    // Avoid inopportune linebreaks before certain punctuations.\n    // '\\u00a0' is a non-breaking space\n    // The character is used instead of `&nbsp;` or `&#160;` for conciseness\n    // and compatibility.\n    .replace(/\\s(?=[;:?!])/g, '\\u00a0')\n}\n\nexport function LError (error       , toGithub          )                       {\n  let url = 'https://github.com/okTurtles/group-income/issues'\n  if (!toGithub && sbp('state/vuex/state').loggedIn) {\n    const baseRoute = sbp('controller/router').options.base\n    url = `${baseRoute}?modal=UserSettingsModal&tab=application-logs&errorMsg=${encodeURIComponent(error.message)}`\n  }\n  return {\n    reportError: L('\"{errorMsg}\". You can {a_}report the error{_a}.', {\n      errorMsg: error.message,\n      'a_': `<a class=\"link\" target=\"_blank\" href=\"${url}\">`,\n      '_a': '</a>'\n    })\n  }\n}\n", "'use strict'\n\n// ugly boilerplate because JavaScript is stupid\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport const ChelErrorGenerator = (\n  name        ,\n  base               = Error\n)               =>\n  ((class extends base {\n    constructor (...params       ) {\n      super(...params)\n      this.name = name // string literal so minifier doesn't overwrite\n      // Polyfill for cause property\n      // $FlowFixMe[prop-missing]\n      if (params[1]?.cause !== this.cause) {\n        // $FlowFixMe[prop-missing]\n        Object.defineProperty(this, 'cause', { configurable: true, writable: true, value: params[1]?.cause })\n      }\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor)\n      }\n    }\n  }     )              )\n\nexport const ChelErrorWarning               = ChelErrorGenerator('ChelErrorWarning')\nexport const ChelErrorAlreadyProcessed               = ChelErrorGenerator('ChelErrorAlreadyProcessed')\nexport const ChelErrorDBBadPreviousHEAD               = ChelErrorGenerator('ChelErrorDBBadPreviousHEAD')\nexport const ChelErrorDBConnection               = ChelErrorGenerator('ChelErrorDBConnection')\nexport const ChelErrorUnexpected               = ChelErrorGenerator('ChelErrorUnexpected')\nexport const ChelErrorKeyAlreadyExists               = ChelErrorGenerator('ChelErrorKeyAlreadyExists')\nexport const ChelErrorUnrecoverable               = ChelErrorGenerator('ChelErrorUnrecoverable')\nexport const ChelErrorForkedChain               = ChelErrorGenerator('ChelErrorForkedChain')\nexport const ChelErrorDecryptionError               = ChelErrorGenerator('ChelErrorDecryptionError')\nexport const ChelErrorDecryptionKeyNotFound               = ChelErrorGenerator('ChelErrorDecryptionKeyNotFound', ChelErrorDecryptionError)\nexport const ChelErrorSignatureError               = ChelErrorGenerator('ChelErrorSignatureError')\nexport const ChelErrorSignatureKeyUnauthorized               = ChelErrorGenerator('ChelErrorSignatureKeyUnauthorized', ChelErrorSignatureError)\nexport const ChelErrorSignatureKeyNotFound               = ChelErrorGenerator('ChelErrorSignatureKeyNotFound', ChelErrorSignatureError)\nexport const ChelErrorFetchServerTimeFailed               = ChelErrorGenerator('ChelErrorFetchServerTimeFailed')\nexport const ChelErrorUnexpectedHttpResponseCode               = ChelErrorGenerator('ChelErrorUnexpectedHttpResponseCode')\nexport const ChelErrorResourceGone               = ChelErrorGenerator('ChelErrorResourceGone', ChelErrorUnexpectedHttpResponseCode)\n", "'use strict'\n\nimport { ChelErrorGenerator } from '~/shared/domains/chelonia/errors.js'\n\nexport const GIErrorIgnoreAndBan               = ChelErrorGenerator('GIErrorIgnoreAndBan')\n\n// Used to throw human readable errors on UI.\nexport const GIErrorUIRuntimeError               = ChelErrorGenerator('GIErrorUIRuntimeError')\n\nexport const GIErrorMissingSigningKeyError               = ChelErrorGenerator('GIErrorMissingSigningKeyError')\n"],
  "mappings": "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",
  "names": ["nargs", "template", "string", "args", "firstArg", "replacementsByKey", "match", "capture", "index", "maybeReplacement", "defaultLanguage", "defaultLanguageCode", "defaultTranslationTable", "currentLanguage", "currentLanguageCode", "currentTranslationTable", "translations_default", "esm_default", "language", "languageCode", "error", "LTags", "tags", "tag", "L", "key", "args", "template", "LError", "toGithub", "url", "ChelErrorGenerator", "name", "base", "params", "ChelErrorWarning", "ChelErrorAlreadyProcessed", "ChelErrorDBBadPreviousHEAD", "ChelErrorDBConnection", "ChelErrorUnexpected", "ChelErrorKeyAlreadyExists", "ChelErrorUnrecoverable", "ChelErrorForkedChain", "ChelErrorDecryptionError", "ChelErrorDecryptionKeyNotFound", "ChelErrorSignatureError", "ChelErrorSignatureKeyUnauthorized", "ChelErrorSignatureKeyNotFound", "ChelErrorFetchServerTimeFailed", "ChelErrorUnexpectedHttpResponseCode", "ChelErrorResourceGone", "GIErrorIgnoreAndBan", "ChelErrorGenerator", "GIErrorUIRuntimeError", "GIErrorMissingSigningKeyError"]
}
