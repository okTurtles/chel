{
  "version": 3,
  "sources": ["../../../frontend/model/contracts/shared/currencies.js"],
  "sourcesContent": ["'use strict'\n\n                  \n                      \n                                         \n                                            \n                 \n                         \n                               \n  \n\n// https://github.com/okTurtles/group-income/issues/813#issuecomment-593680834\n// round all accounting to DECIMALS_MAX decimal places max to avoid consensus\n// issues that can arise due to different floating point values\n// at extreme precisions. If this becomes inadequate, instead of increasing\n// this value, switch to a different currency base, e.g. from BTC to mBTC.\nexport const DECIMALS_MAX = 8\n\nfunction commaToDots (value                 )         {\n  // ex: \"1,55\" -> \"1.55\"\n  return typeof value === 'string' ? value.replace(/,/, '.') : value.toString()\n}\n\nfunction isNumeric (nr        )          {\n  return !isNaN((nr     ) - parseFloat(nr))\n}\n\nfunction isInDecimalsLimit (nr        , decimalsMax        ) {\n  const decimals = nr.split('.')[1]\n  return !decimals || decimals.length <= decimalsMax\n}\n\n// NOTE: Unsure whether this is *always* string; it comes from 'validators' in other files\nfunction validateMincome (value        , decimalsMax        ) {\n  const nr = commaToDots(value)\n  return isNumeric(nr) && isInDecimalsLimit(nr, decimalsMax)\n}\n\nfunction decimalsOrInt (num        , decimalsMax        )         {\n  // ex: 12.5 -> \"12.50\", but 250 -> \"250\"\n  return num.toFixed(decimalsMax).replace(/\\.0+$/, '')\n}\n\nexport function saferFloat (value        )         {\n  // ex: 1.333333333333333333 -> 1.33333333\n  return parseFloat(value.toFixed(DECIMALS_MAX))\n}\n\nexport function normalizeCurrency (value        )         {\n  // ex: \"1,333333333333333333\" -> 1.33333333\n  return saferFloat(parseFloat(commaToDots(value)))\n}\n\n// NOTE: Unsure whether this is *always* string; it comes from 'validators' in other files\nexport function mincomePositive (value        )          {\n  return parseFloat(commaToDots(value)) > 0\n}\n\nfunction makeCurrency (options)           {\n  const { symbol, symbolWithCode, decimalsMax, formatCurrency } = options\n  return {\n    symbol,\n    symbolWithCode,\n    decimalsMax,\n    displayWithCurrency: (n        ) => formatCurrency(decimalsOrInt(n, decimalsMax)),\n    displayWithoutCurrency: (n        ) => decimalsOrInt(n, decimalsMax),\n    validate: (n        ) => validateMincome(n, decimalsMax)\n  }\n}\n\n// NOTE: if we needed for some reason, this could also be defined in\n//       a json file that's read in and generates this object. For\n//       example, that would allow the addition of currencies without\n//       having to \"recompile\" a new version of the app.\nconst currencies                         = {\n  USD: makeCurrency({\n    symbol: '$',\n    symbolWithCode: '$ USD',\n    decimalsMax: 2,\n    formatCurrency: amount => '$' + amount\n  }),\n  EUR: makeCurrency({\n    symbol: '\u20AC',\n    symbolWithCode: '\u20AC EUR',\n    decimalsMax: 2,\n    formatCurrency: amount => '\u20AC' + amount\n  }),\n  BTC: makeCurrency({\n    symbol: '\u0243',\n    symbolWithCode: '\u0243 BTC',\n    decimalsMax: DECIMALS_MAX,\n    formatCurrency: amount => amount + '\u0243'\n  })\n}\n\nexport default currencies\n"],
  "mappings": "AAkBA,SAASA,EAAaC,EAAgC,CAEpD,OAAO,OAAOA,GAAU,SAAWA,EAAM,QAAQ,IAAK,GAAG,EAAIA,EAAM,SAAS,CAC9E,CAEA,SAASC,EAAWC,EAAqB,CACvC,MAAO,CAAC,MAAOA,EAAW,WAAWA,CAAE,CAAC,CAC1C,CAEA,SAASC,EAAmBD,EAAYE,EAAqB,CAC3D,IAAMC,EAAWH,EAAG,MAAM,GAAG,EAAE,CAAC,EAChC,MAAO,CAACG,GAAYA,EAAS,QAAUD,CACzC,CAGA,SAASE,EAAiBN,EAAeI,EAAqB,CAC5D,IAAMF,EAAKH,EAAYC,CAAK,EAC5B,OAAOC,EAAUC,CAAE,GAAKC,EAAkBD,EAAIE,CAAW,CAC3D,CAEA,SAASG,EAAeC,EAAaJ,EAA6B,CAEhE,OAAOI,EAAI,QAAQJ,CAAW,EAAE,QAAQ,QAAS,EAAE,CACrD,CAEO,SAASK,EAAYT,EAAuB,CAEjD,OAAO,WAAWA,EAAM,QAAQ,CAAY,CAAC,CAC/C,CAEO,SAASU,EAAmBV,EAAuB,CAExD,OAAOS,EAAW,WAAWV,EAAYC,CAAK,CAAC,CAAC,CAClD,CAGO,SAASW,EAAiBX,EAAwB,CACvD,OAAO,WAAWD,EAAYC,CAAK,CAAC,EAAI,CAC1C,CAEA,SAASY,EAAcC,EAAmB,CACxC,GAAM,CAAE,OAAAC,EAAQ,eAAAC,EAAgB,YAAAX,EAAa,eAAAY,CAAe,EAAIH,EAChE,MAAO,CACL,OAAAC,EACA,eAAAC,EACA,YAAAX,EACA,oBAAsBa,GAAcD,EAAeT,EAAcU,EAAGb,CAAW,CAAC,EAChF,uBAAyBa,GAAcV,EAAcU,EAAGb,CAAW,EACnE,SAAWa,GAAcX,EAAgBW,EAAGb,CAAW,CACzD,CACF,CAMA,IAAMc,EAAqC,CACzC,IAAKN,EAAa,CAChB,OAAQ,IACR,eAAgB,QAChB,YAAa,EACb,eAAgBO,GAAU,IAAMA,CAClC,CAAC,EACD,IAAKP,EAAa,CAChB,OAAQ,SACR,eAAgB,aAChB,YAAa,EACb,eAAgBO,GAAU,SAAMA,CAClC,CAAC,EACD,IAAKP,EAAa,CAChB,OAAQ,SACR,eAAgB,aAChB,YAAa,EACb,eAAgBO,GAAUA,EAAS,QACrC,CAAC,CACH,EAEOC,EAAQF",
  "names": ["commaToDots", "value", "isNumeric", "nr", "isInDecimalsLimit", "decimalsMax", "decimals", "validateMincome", "decimalsOrInt", "num", "saferFloat", "normalizeCurrency", "mincomePositive", "makeCurrency", "options", "symbol", "symbolWithCode", "formatCurrency", "n", "currencies", "amount", "currencies_default"]
}
