{
  "version": 3,
  "sources": ["../../../node_modules/@sbp/sbp/dist/esm/index.js"],
  "sourcesContent": ["const selectors = Object.create(null);\nconst domains = Object.create(null);\nconst globalFilters = [];\nconst domainFilters = Object.create(null);\nconst selectorFilters = Object.create(null);\nconst unsafeSelectors = Object.create(null);\nconst DOMAIN_REGEX = /^[^/]+/;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction sbp(selector, ...data) {\n    const domain = domainFromSelector(selector);\n    const starSelector = `${domain}/*`;\n    const selExists = !!selectors[selector];\n    // Copy of the original selector\n    let sel = selector;\n    if (!selExists) {\n        // If the selector doesn't exist and the start selector is defined,\n        // use the star selector\n        if (selectors[starSelector]) {\n            sel = starSelector;\n        }\n        else {\n            throw new Error(`SBP: selector not registered: ${selector}`);\n        }\n    }\n    // Filters can perform additional functions, and by returning `false` they\n    // can prevent the execution of a selector. Check the most specific filters first.\n    for (const filters of [selectorFilters[selector], domainFilters[domain], globalFilters]) {\n        if (filters) {\n            for (const filter of filters) {\n                if (filter(domain, selector, data) === false)\n                    return;\n            }\n        }\n    }\n    if (!selExists) {\n        // When using the star selector, the first argument is the original selector\n        // used when calling `sbp`.\n        data.unshift(selector);\n    }\n    return selectors[sel].apply(domains[domain].state, data);\n}\nexport function domainFromSelector(selector) {\n    const domainLookup = DOMAIN_REGEX.exec(selector);\n    if (domainLookup === null) {\n        throw new Error(`SBP: selector missing domain: ${selector}`);\n    }\n    return domainLookup[0];\n}\nconst SBP_BASE_SELECTORS = {\n    'sbp/selectors/register': (sels) => {\n        const registered = [];\n        for (const selector in sels) {\n            const domainName = domainFromSelector(selector);\n            // ensure each domain has a domain state associated with it\n            const domain = domainName in domains ? domains[domainName] : (domains[domainName] = { state: Object.create(null), locked: false });\n            if (domain.locked) {\n                (console.warn || console.log)(`[SBP WARN]: not registering selector on locked domain: '${selector}'`);\n            }\n            else if (selectors[selector]) {\n                (console.warn || console.log)(`[SBP WARN]: not registering already registered selector: '${selector}'`);\n            }\n            else if (typeof sels[selector] === 'function') {\n                if (unsafeSelectors[selector]) {\n                    // important warning in case we loaded unknown malware beforehand and aren't expecting this\n                    (console.warn || console.log)(`[SBP WARN]: registering unsafe selector: '${selector}' (remember to lock after overwriting)`);\n                }\n                const fn = selectors[selector] = sels[selector];\n                registered.push(selector);\n                // call the special _init function immediately upon registering\n                if (selector === `${domainName}/_init`) {\n                    fn.call(domain.state);\n                }\n            }\n        }\n        return registered;\n    },\n    'sbp/selectors/unregister': (sels) => {\n        var _a;\n        for (const selector of sels) {\n            if (!unsafeSelectors[selector]) {\n                throw new Error(`SBP: can't unregister locked selector: ${selector}`);\n            }\n            if ((_a = domains[domainFromSelector(selector)]) === null || _a === void 0 ? void 0 : _a.locked) {\n                throw new Error(`SBP: can't unregister selector on a locked domain: '${selector}'`);\n            }\n            delete selectors[selector];\n        }\n    },\n    'sbp/selectors/overwrite': (sels) => {\n        sbp('sbp/selectors/unregister', Object.keys(sels));\n        return sbp('sbp/selectors/register', sels);\n    },\n    'sbp/selectors/unsafe': (sels) => {\n        for (const selector of sels) {\n            if (selectors[selector]) {\n                throw new Error('unsafe must be called before registering selector');\n            }\n            unsafeSelectors[selector] = true;\n        }\n    },\n    'sbp/selectors/lock': (sels) => {\n        for (const selector of sels) {\n            delete unsafeSelectors[selector];\n        }\n    },\n    'sbp/selectors/fn': (sel) => {\n        return selectors[sel];\n    },\n    'sbp/filters/global/add': (filter) => {\n        globalFilters.push(filter);\n    },\n    'sbp/filters/domain/add': (domain, filter) => {\n        if (!domainFilters[domain])\n            domainFilters[domain] = [];\n        domainFilters[domain].push(filter);\n    },\n    'sbp/filters/selector/add': (selector, filter) => {\n        if (!selectorFilters[selector])\n            selectorFilters[selector] = [];\n        selectorFilters[selector].push(filter);\n    },\n    'sbp/domains/lock': (domainNames) => {\n        // If no argument was given then locks every known domain.\n        if (!domainNames) {\n            for (const name in domains) {\n                domains[name].locked = true;\n            }\n        }\n        else {\n            for (const name of domainNames) {\n                if (!domains[name]) {\n                    throw new Error(`SBP: cannot lock non-existent domain: ${name}`);\n                }\n                domains[name].locked = true;\n            }\n        }\n    }\n};\nSBP_BASE_SELECTORS['sbp/selectors/register'](SBP_BASE_SELECTORS);\nexport default sbp;\n"],
  "mappings": "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",
  "names": ["selectors", "domains", "globalFilters", "domainFilters", "selectorFilters", "unsafeSelectors", "DOMAIN_REGEX", "sbp", "selector", "data", "domain", "domainFromSelector", "starSelector", "selExists", "sel", "filters", "filter", "domainLookup", "SBP_BASE_SELECTORS", "sels", "registered", "domainName", "fn", "_a", "domainNames", "name", "esm_default"]
}
