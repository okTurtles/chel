{
  "version": 3,
  "sources": ["../../../frontend/model/chatroom/utils.js"],
  "sourcesContent": ["'use strict'\nimport sbp from '@sbp/sbp'\nimport { makeMentionFromUserID } from '@model/contracts/shared/functions.js'\nimport {\n  CHATROOM_CHANNEL_MENTION_SPECIAL_CHAR,\n  CHATROOM_MEMBER_MENTION_SPECIAL_CHAR\n} from '@model/contracts/shared/constants.js'\n\nexport function makeChannelMention (str        , withId          = false)         {\n  return `${CHATROOM_CHANNEL_MENTION_SPECIAL_CHAR}${withId ? ':chatID:' : ''}${str}`\n}\n\nexport function getIdFromChannelMention (str        )         {\n  return str.includes(':chatID:')\n    ? str.split(':chatID:')[1]\n    : ''\n}\n\nexport function swapMentionIDForDisplayname (\n  text        ,\n  options         = {\n    escaped: true, // this indicates that the text contains escaped characters\n    forChat: true // this indicates that the function is being used for messages inside chatroom\n  }\n)         {\n  const {\n    getChatroomNameById,\n    usernameFromID,\n    userDisplayNameFromID\n  } = sbp('state/vuex/getters')\n  const { reverseNamespaceLookups } = sbp('state/vuex/state')\n  const possibleMentions = [\n    ...Object.keys(reverseNamespaceLookups).map(u => makeMentionFromUserID(u).me).filter(v => !!v),\n    makeChannelMention('[^\\\\s]+', true) // chat-mention as contractID has a format of `#:chatID:...`. So target them as a pattern instead of the exact strings.\n  ]\n\n  const { escaped, forChat } = options\n  const regEx = escaped\n    ? new RegExp(`(?<=\\\\s|^)(${possibleMentions.join('|')})(?=[^\\\\w\\\\d]|$)`)\n    : new RegExp(`(${possibleMentions.join('|')})`)\n\n  const swap = (t) => {\n    if (t.startsWith(CHATROOM_MEMBER_MENTION_SPECIAL_CHAR)) {\n      // swap member mention\n      const userID = t.slice(1)\n      const prefix = forChat ? CHATROOM_MEMBER_MENTION_SPECIAL_CHAR : ''\n      const body = forChat ? usernameFromID(userID) : userDisplayNameFromID(userID)\n      return prefix + body\n    } else if (t.startsWith(CHATROOM_CHANNEL_MENTION_SPECIAL_CHAR)) {\n      // swap channel mention\n      const channelID = getIdFromChannelMention(t)\n      const prefix = forChat ? CHATROOM_CHANNEL_MENTION_SPECIAL_CHAR : ''\n      return prefix + getChatroomNameById(channelID)\n    }\n    return t\n  }\n\n  return text\n    .split(regEx)\n    .map(t => regEx.test(t) ? swap(t) : t)\n    .join('')\n}\n\n// This function serves two purposes, depending on the forceUsername parameter\n// If forceUsername is true, mentions will be like @username, @all, for display\n// purposes.\n// If forceUsername is false (default), mentions like @username will be converted\n// to @<userID>, for internal representation purposes.\n// forceUsername is used for display purposes in the UI, so that we can show\n// a mention like @username instead of @userID in SendArea\nexport function makeMentionFromUsername (username        , forceUsername          )   \n                           \n    {\n  const rootGetters = sbp('state/vuex/getters')\n  // Even if forceUsername is true, we want to look up the contract ID to ensure\n  // that it exists, so that we know it'll later succeed.\n  const userID = rootGetters.ourContactProfilesByUsername[username]?.contractID\n  return makeMentionFromUserID(forceUsername && userID ? username : userID)\n}\n\nexport { makeMentionFromUserID }\n"],
  "mappings": "oJAQO,SAASA,EAAoBC,EAAaC,EAAkB,GAAe,CAChF,MAAO,GAAGC,CAAqC,GAAGD,EAAS,WAAa,EAAE,GAAGD,CAAG,EAClF,CAEO,SAASG,EAAyBH,EAAqB,CAC5D,OAAOA,EAAI,SAAS,UAAU,EAC1BA,EAAI,MAAM,UAAU,EAAE,CAAC,EACvB,EACN,CAEO,SAASI,EACdC,EACAC,EAAkB,CAChB,QAAS,GACT,QAAS,EACX,EACQ,CACR,GAAM,CACJ,oBAAAC,EACA,eAAAC,EACA,sBAAAC,CACF,EAAIC,EAAI,oBAAoB,EACtB,CAAE,wBAAAC,CAAwB,EAAID,EAAI,kBAAkB,EACpDE,EAAmB,CACvB,GAAG,OAAO,KAAKD,CAAuB,EAAE,IAAIE,GAAKC,EAAsBD,CAAC,EAAE,EAAE,EAAE,OAAOE,GAAK,CAAC,CAACA,CAAC,EAC7FhB,EAAmB,UAAW,EAAI,CACpC,EAEM,CAAE,QAAAiB,EAAS,QAAAC,CAAQ,EAAIX,EACvBY,EAAQF,EACV,IAAI,OAAO,cAAcJ,EAAiB,KAAK,GAAG,CAAC,kBAAkB,EACrE,IAAI,OAAO,IAAIA,EAAiB,KAAK,GAAG,CAAC,GAAG,EAE1CO,EAAQC,GAAM,CAClB,GAAIA,EAAE,WAAWC,CAAoC,EAAG,CAEtD,IAAMC,EAASF,EAAE,MAAM,CAAC,EAClBG,EAASN,EAAUI,EAAuC,GAC1DG,EAAOP,EAAUT,EAAec,CAAM,EAAIb,EAAsBa,CAAM,EAC5E,OAAOC,EAASC,CAClB,SAAWJ,EAAE,WAAWlB,CAAqC,EAAG,CAE9D,IAAMuB,EAAYtB,EAAwBiB,CAAC,EAE3C,OADeH,EAAUf,EAAwC,IACjDK,EAAoBkB,CAAS,CAC/C,CACA,OAAOL,CACT,EAEA,OAAOf,EACJ,MAAMa,CAAK,EACX,IAAIE,GAAKF,EAAM,KAAKE,CAAC,EAAID,EAAKC,CAAC,EAAIA,CAAC,EACpC,KAAK,EAAE,CACZ,CASO,SAASM,EAAyBC,EAAkBC,EAEvD,CAIF,IAAMN,EAHcZ,EAAI,oBAAoB,EAGjB,6BAA6BiB,CAAQ,GAAG,WACnE,OAAOb,EAAsBc,GAAiBN,EAASK,EAAWL,CAAM,CAC1E",
  "names": ["makeChannelMention", "str", "withId", "CHATROOM_CHANNEL_MENTION_SPECIAL_CHAR", "getIdFromChannelMention", "swapMentionIDForDisplayname", "text", "options", "getChatroomNameById", "usernameFromID", "userDisplayNameFromID", "esm_default", "reverseNamespaceLookups", "possibleMentions", "u", "makeMentionFromUserID", "v", "escaped", "forChat", "regEx", "swap", "t", "CHATROOM_MEMBER_MENTION_SPECIAL_CHAR", "userID", "prefix", "body", "channelID", "makeMentionFromUsername", "username", "forceUsername"]
}
