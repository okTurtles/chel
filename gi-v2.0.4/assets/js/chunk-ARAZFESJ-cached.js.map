{
  "version": 3,
  "sources": ["../../../frontend/views/utils/pointerEventsMixins.js"],
  "sourcesContent": ["import { throttle } from 'turtledash'\nexport const PINCH_ZOOM_THRESHOLD = 2.5\n\nconst PINCH_GESTURE = {\n  OUT: 'pinch-out',\n  IN: 'pinch-in'\n}\nconst mixinGeneratorDefaultOpts = {\n  pointerMoveOnWindow: false\n}\n\nconst pointerEventsMixinFactory = (opts      = mixinGeneratorDefaultOpts)      => {\n  return {\n    data ()      {\n      return {\n        pointer: {\n          evts: [],\n          prevDistance: null, // tracking distance between two pointers when 'pinch' gesture is happening\n          prevDistChangeFactor: null,\n          prevPinchAction: null,\n          prevPinchCenter: null\n        },\n        throttledHandlers: {\n          pointerMove: throttle(this.onPointerMove, 5)\n        },\n        matchMedia: {\n          handler: null,\n          isTouch: false\n        }\n      }\n    },\n    methods: {\n      onPointerDown (e        ) {\n        const { pointerId, clientX, clientY } = e\n        this.pointer.evts.push({\n          id: pointerId,\n          prev: { x: clientX, y: clientY },\n          current: { x: clientX, y: clientY }\n        })\n      },\n      onPointerCancel (e        ) {\n        this.pointer.evts = []\n        this.pointer.prevDistance = null\n        this.pointer.prevPinchCenter = null\n        this.pointer.prevDistChangeFactor = null\n        this.pointer.prevPinchAction = null\n\n        this.postPointerCancel && this.postPointerCancel()\n      },\n      onPointerMove (e        ) {\n        // reponsible for translation of the image on the canvas\n        if (!this.pointer.evts.length) return\n\n        const { pointerId, pointerType, clientX, clientY } = e\n        const { evts } = this.pointer\n        const evItem = evts.find(({ id }) => id === pointerId)\n\n        if (!evItem) return\n\n        evItem.prev = { x: evItem.current.x, y: evItem.current.y }\n        evItem.current = { x: clientX, y: clientY }\n\n        if (evts.length === 1) {\n          // translation\n          const adjustmentFactor = this.matchMedia.isTouch ? 1.5 : 1.1\n          this.translate({\n            x: (evItem.current.x - evItem.prev.x) * adjustmentFactor,\n            y: (evItem.current.y - evItem.prev.y) * adjustmentFactor\n          })\n\n          // clear states related to pinch-gesture\n          this.pointer.prevPinchCenter = null\n          this.pointer.prevDistance = null\n          this.pointer.prevDistChangeFactor = null\n          this.pointer.prevPinchAction = null\n        } else if (pointerType === 'touch' && evts.length === 2) {\n          // pinch in/out\n          const [evt1, evt2] = evts\n          const xDist = Math.abs(evt2.current.x - evt1.current.x)\n          const yDist = Math.abs(evt2.current.y - evt1.current.y)\n          const center = this.pointer.prevPinchCenter === null\n            ? {\n                x: Math.min(evt1.current.x, evt2.current.x) + xDist / 2,\n                y: Math.min(evt1.current.y, evt2.current.y) + yDist / 2\n              }\n            : this.pointer.prevPinchCenter\n\n          if (this.pointer.prevPinchCenter === null) {\n            this.pointer.prevPinchCenter = center\n          }\n\n          // Calculate distance update factor\n          const currentLinearDist = Math.sqrt(xDist * xDist + yDist * yDist)\n          const prevLinearDist = this.pointer.prevDistance || currentLinearDist\n          const currPinchAction = (currentLinearDist - prevLinearDist) > PINCH_ZOOM_THRESHOLD\n            ? PINCH_GESTURE.OUT\n            : (currentLinearDist - prevLinearDist) < PINCH_ZOOM_THRESHOLD * -1\n                ? PINCH_GESTURE.IN\n                : null\n\n          const distChangeFactorCalc = Math.abs(currentLinearDist - prevLinearDist)\n          // NOTE for below adjustment: the moment the pinch-action finishes, the distChangeFactor value becomes strangely large,\n          // leading to an abrupt change in image scale. so it needs to ignore this value.\n          const changeFactorTooLarge = currPinchAction === this.pointer.prevPinchAction &&\n            this.pointer.prevDistChangeFactor > 0 &&\n            distChangeFactorCalc > this.pointer.prevDistChangeFactor * 3\n\n          if (changeFactorTooLarge) { return }\n\n          const args = { changeFactor: distChangeFactorCalc, center }\n          this.pointer.prevDistChangeFactor = distChangeFactorCalc\n\n          if (currPinchAction === PINCH_GESTURE.OUT) {\n            this.$emit('pinch-out', args)\n\n            // The component that registers this mixin needs to be able to listen to this custom event too.\n            this.pinchOutHandler &&\n              this.pinchOutHandler(args)\n          } else if (currPinchAction === PINCH_GESTURE.IN) {\n            this.$emit('pinch-in', args)\n\n            // The component that registers this mixin needs to be able to listen to this custom event too.\n            this.pinchInHandler &&\n              this.pinchInHandler(args)\n          }\n\n          this.pointer.prevDistance = currentLinearDist // track it for the next calculation\n          this.pointer.prevPinchAction = currPinchAction\n        }\n      }\n    },\n    mounted () {\n      const moveEventEl = opts.pointerMoveOnWindow ? window : this.$el\n\n      this.$el.addEventListener('pointerdown', this.onPointerDown)\n      moveEventEl.addEventListener('pointermove', this.throttledHandlers.pointerMove)\n      moveEventEl.addEventListener('pointerup', this.onPointerCancel)\n      this.$el.addEventListener('pointercancel', this.onPointerCancel)\n      if (!opts.pointerMoveOnWindow) {\n        this.$el.addEventListener('pointerout', this.onPointerCancel)\n      }\n\n      const checkTouch = window.matchMedia('(any-pointer:fine)')\n      this.matchMedia.isTouch = !checkTouch.matches\n      this.matchMedia.handler = checkTouch\n\n      checkTouch.onchange = (e) => {\n        this.matchMedia.isTouch = !e.matches\n      }\n    },\n    beforeDestroy () {\n      const moveEventEl = opts.pointerMoveOnWindow ? window : this.$el\n\n      this.$el.removeEventListener('pointerdown', this.onPointerDown)\n      moveEventEl.removeEventListener('pointermove', this.throttledHandlers.pointerMove)\n      moveEventEl.removeEventListener('pointerup', this.onPointerCancel)\n      this.$el.removeEventListener('pointercancel', this.onPointerCancel)\n      if (!opts.pointerMoveOnWindow) {\n        this.$el.removeEventListener('pointerout', this.onPointerCancel)\n      }\n\n      this.matchMedia.handler.onchange = null\n    }\n  }\n}\n\nexport default pointerEventsMixinFactory\n"],
  "mappings": "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",
  "names": ["PINCH_ZOOM_THRESHOLD", "PINCH_GESTURE", "mixinGeneratorDefaultOpts", "pointerEventsMixinFactory", "opts", "throttle", "e", "pointerId", "clientX", "clientY", "pointerType", "evts", "evItem", "id", "adjustmentFactor", "evt1", "evt2", "xDist", "yDist", "center", "currentLinearDist", "prevLinearDist", "currPinchAction", "distChangeFactorCalc", "args", "moveEventEl", "checkTouch", "pointerEventsMixins_default"]
}
