/* esm.sh - esbuild bundle(multiformats@9.9.0) deno production */
var he=Object.defineProperty;var $=(r,e)=>{for(var t in e)he(r,t,{get:e[t],enumerable:!0})};var k={};$(k,{decode:()=>M,encodeTo:()=>A,encodingLength:()=>C});var fe=ee,Y=128,pe=127,le=~pe,ue=Math.pow(2,31);function ee(r,e,t){e=e||[],t=t||0;for(var n=t;r>=ue;)e[t++]=r&255|Y,r/=128;for(;r&le;)e[t++]=r&255|Y,r>>>=7;return e[t]=r|0,ee.bytes=t-n+1,e}var we=P,be=128,H=127;function P(r,n){var t=0,n=n||0,o=0,s=n,i,c=r.length;do{if(s>=c)throw P.bytes=0,new RangeError("Could not decode varint");i=r[s++],t+=o<28?(i&H)<<o:(i&H)*Math.pow(2,o),o+=7}while(i>=be);return P.bytes=s-n,t}var ge=Math.pow(2,7),ye=Math.pow(2,14),me=Math.pow(2,21),ve=Math.pow(2,28),xe=Math.pow(2,35),Ee=Math.pow(2,42),Se=Math.pow(2,49),Ae=Math.pow(2,56),Ce=Math.pow(2,63),Ue=function(r){return r<ge?1:r<ye?2:r<me?3:r<ve?4:r<xe?5:r<Ee?6:r<Se?7:r<Ae?8:r<Ce?9:10},De={encode:fe,decode:we,encodingLength:Ue},ze=De,O=ze;var M=(r,e=0)=>[O.decode(r,e),O.decode.bytes],A=(r,e,t=0)=>(O.encode(r,e,t),e),C=r=>O.encodingLength(r);var R={};$(R,{Digest:()=>D,create:()=>N,decode:()=>G,equals:()=>Q});var re={};$(re,{coerce:()=>U,empty:()=>te,equals:()=>J,fromHex:()=>Me,fromString:()=>Oe,isBinary:()=>Ne,toHex:()=>Ie,toString:()=>Le});var te=new Uint8Array(0),Ie=r=>r.reduce((e,t)=>e+t.toString(16).padStart(2,"0"),""),Me=r=>{let e=r.match(/../g);return e?new Uint8Array(e.map(t=>parseInt(t,16))):te},J=(r,e)=>{if(r===e)return!0;if(r.byteLength!==e.byteLength)return!1;for(let t=0;t<r.byteLength;t++)if(r[t]!==e[t])return!1;return!0},U=r=>{if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")},Ne=r=>r instanceof ArrayBuffer||ArrayBuffer.isView(r),Oe=r=>new TextEncoder().encode(r),Le=r=>new TextDecoder().decode(r);var N=(r,e)=>{let t=e.byteLength,n=C(r),o=n+C(t),s=new Uint8Array(o+t);return A(r,s,0),A(t,s,n),s.set(e,o),new D(r,t,e,s)},G=r=>{let e=U(r),[t,n]=M(e),[o,s]=M(e.subarray(n)),i=e.subarray(n+s);if(i.byteLength!==o)throw new Error("Incorrect length");return new D(t,o,i,e)},Q=(r,e)=>r===e?!0:r.code===e.code&&r.size===e.size&&J(r.bytes,e.bytes),D=class{constructor(e,t,n,o){this.code=e,this.size=t,this.digest=n,this.bytes=o}};function Te(r,e){if(r.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),n=0;n<t.length;n++)t[n]=255;for(var o=0;o<r.length;o++){var s=r.charAt(o),i=s.charCodeAt(0);if(t[i]!==255)throw new TypeError(s+" is ambiguous");t[i]=o}var c=r.length,h=r.charAt(0),z=Math.log(c)/Math.log(256),p=Math.log(256)/Math.log(c);function I(a){if(a instanceof Uint8Array||(ArrayBuffer.isView(a)?a=new Uint8Array(a.buffer,a.byteOffset,a.byteLength):Array.isArray(a)&&(a=Uint8Array.from(a))),!(a instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(a.length===0)return"";for(var f=0,S=0,u=0,b=a.length;u!==b&&a[u]===0;)u++,f++;for(var g=(b-u)*p+1>>>0,l=new Uint8Array(g);u!==b;){for(var y=a[u],E=0,w=g-1;(y!==0||E<S)&&w!==-1;w--,E++)y+=256*l[w]>>>0,l[w]=y%c>>>0,y=y/c>>>0;if(y!==0)throw new Error("Non-zero carry");S=E,u++}for(var v=g-S;v!==g&&l[v]===0;)v++;for(var B=h.repeat(f);v<g;++v)B+=r.charAt(l[v]);return B}function V(a){if(typeof a!="string")throw new TypeError("Expected String");if(a.length===0)return new Uint8Array;var f=0;if(a[f]!==" "){for(var S=0,u=0;a[f]===h;)S++,f++;for(var b=(a.length-f)*z+1>>>0,g=new Uint8Array(b);a[f];){var l=t[a.charCodeAt(f)];if(l===255)return;for(var y=0,E=b-1;(l!==0||y<u)&&E!==-1;E--,y++)l+=c*g[E]>>>0,g[E]=l%256>>>0,l=l/256>>>0;if(l!==0)throw new Error("Non-zero carry");u=y,f++}if(a[f]!==" "){for(var w=b-u;w!==b&&g[w]===0;)w++;for(var v=new Uint8Array(S+(b-w)),B=S;w!==b;)v[B++]=g[w++];return v}}}function de(a){var f=V(a);if(f)return f;throw new Error(`Non-${e} character`)}return{encode:I,decodeUnsafe:V,decode:de}}var Ve=Te,Be=Ve,ne=Be;var X=class{constructor(e,t,n){this.name=e,this.prefix=t,this.baseEncode=n}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}},K=class{constructor(e,t,n){if(this.name=e,this.prefix=t,t.codePointAt(0)===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=n}decode(e){if(typeof e=="string"){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(e){return oe(this,e)}},W=class{constructor(e){this.decoders=e}or(e){return oe(this,e)}decode(e){let t=e[0],n=this.decoders[t];if(n)return n.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}},oe=(r,e)=>new W({...r.decoders||{[r.prefix]:r},...e.decoders||{[e.prefix]:e}}),Z=class{constructor(e,t,n,o){this.name=e,this.prefix=t,this.baseEncode=n,this.baseDecode=o,this.encoder=new X(e,t,n),this.decoder=new K(e,t,o)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}},se=({name:r,prefix:e,encode:t,decode:n})=>new Z(r,e,t,n),_=({prefix:r,name:e,alphabet:t})=>{let{encode:n,decode:o}=ne(t,e);return se({prefix:r,name:e,encode:n,decode:s=>U(o(s))})},$e=(r,e,t,n)=>{let o={};for(let p=0;p<e.length;++p)o[e[p]]=p;let s=r.length;for(;r[s-1]==="=";)--s;let i=new Uint8Array(s*t/8|0),c=0,h=0,z=0;for(let p=0;p<s;++p){let I=o[r[p]];if(I===void 0)throw new SyntaxError(`Non-${n} character`);h=h<<t|I,c+=t,c>=8&&(c-=8,i[z++]=255&h>>c)}if(c>=t||255&h<<8-c)throw new SyntaxError("Unexpected end of data");return i},ke=(r,e,t)=>{let n=e[e.length-1]==="=",o=(1<<t)-1,s="",i=0,c=0;for(let h=0;h<r.length;++h)for(c=c<<8|r[h],i+=8;i>t;)i-=t,s+=e[o&c>>i];if(i&&(s+=e[o&c<<t-i]),n)for(;s.length*t&7;)s+="=";return s},m=({name:r,prefix:e,bitsPerChar:t,alphabet:n})=>se({prefix:e,name:r,encode(o){return ke(o,n,t)},decode(o){return $e(o,n,t,r)}});var x=_({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),rt=_({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var L=m({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),st=m({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),it=m({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),at=m({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),ct=m({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),dt=m({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),ht=m({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),ft=m({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),pt=m({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var d=class{constructor(e,t,n,o){this.code=t,this.version=e,this.multihash=n,this.bytes=o,this.byteOffset=o.byteOffset,this.byteLength=o.byteLength,this.asCID=this,this._baseCache=new Map,Object.defineProperties(this,{byteOffset:j,byteLength:j,code:q,version:q,multihash:q,bytes:q,_baseCache:j,asCID:j})}toV0(){switch(this.version){case 0:return this;default:{let{code:e,multihash:t}=this;if(e!==T)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==Fe)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return d.createV0(t)}}}toV1(){switch(this.version){case 0:{let{code:e,digest:t}=this.multihash,n=N(e,t);return d.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}equals(e){return e&&this.code===e.code&&this.version===e.version&&Q(this.multihash,e.multihash)}toString(e){let{bytes:t,version:n,_baseCache:o}=this;switch(n){case 0:return qe(t,o,e||x.encoder);default:return je(t,o,e||L.encoder)}}toJSON(){return{code:this.code,version:this.version,hash:this.multihash.bytes}}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}static isCID(e){return Je(/^0\.0/,Ge),!!(e&&(e[ae]||e.asCID===e))}get toBaseEncodedString(){throw new Error("Deprecated, use .toString()")}get codec(){throw new Error('"codec" property is deprecated, use integer "code" property instead')}get buffer(){throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead")}get multibaseName(){throw new Error('"multibaseName" property is deprecated')}get prefix(){throw new Error('"prefix" property is deprecated')}static asCID(e){if(e instanceof d)return e;if(e!=null&&e.asCID===e){let{version:t,code:n,multihash:o,bytes:s}=e;return new d(t,n,o,s||ie(t,n,o.bytes))}else if(e!=null&&e[ae]===!0){let{version:t,multihash:n,code:o}=e,s=G(n);return d.create(t,o,s)}else return null}static create(e,t,n){if(typeof t!="number")throw new Error("String codecs are no longer supported");switch(e){case 0:{if(t!==T)throw new Error(`Version 0 CID must use dag-pb (code: ${T}) block encoding`);return new d(e,t,n,n.bytes)}case 1:{let o=ie(e,t,n.bytes);return new d(e,t,n,o)}default:throw new Error("Invalid version")}}static createV0(e){return d.create(0,T,e)}static createV1(e,t){return d.create(1,e,t)}static decode(e){let[t,n]=d.decodeFirst(e);if(n.length)throw new Error("Incorrect length");return t}static decodeFirst(e){let t=d.inspectBytes(e),n=t.size-t.multihashSize,o=U(e.subarray(n,n+t.multihashSize));if(o.byteLength!==t.multihashSize)throw new Error("Incorrect length");let s=o.subarray(t.multihashSize-t.digestSize),i=new D(t.multihashCode,t.digestSize,s,o);return[t.version===0?d.createV0(i):d.createV1(t.codec,i),e.subarray(t.size)]}static inspectBytes(e){let t=0,n=()=>{let[I,V]=M(e.subarray(t));return t+=V,I},o=n(),s=T;if(o===18?(o=0,t=0):o===1&&(s=n()),o!==0&&o!==1)throw new RangeError(`Invalid CID version ${o}`);let i=t,c=n(),h=n(),z=t+h,p=z-i;return{version:o,codec:s,multihashCode:c,digestSize:h,multihashSize:p,size:z}}static parse(e,t){let[n,o]=Re(e,t),s=d.decode(o);return s._baseCache.set(n,e),s}},Re=(r,e)=>{switch(r[0]){case"Q":{let t=e||x;return[x.prefix,t.decode(`${x.prefix}${r}`)]}case x.prefix:{let t=e||x;return[x.prefix,t.decode(r)]}case L.prefix:{let t=e||L;return[L.prefix,t.decode(r)]}default:{if(e==null)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[r[0],e.decode(r)]}}},qe=(r,e,t)=>{let{prefix:n}=t;if(n!==x.prefix)throw Error(`Cannot string encode V0 in ${t.name} encoding`);let o=e.get(n);if(o==null){let s=t.encode(r).slice(1);return e.set(n,s),s}else return o},je=(r,e,t)=>{let{prefix:n}=t,o=e.get(n);if(o==null){let s=t.encode(r);return e.set(n,s),s}else return o},T=112,Fe=18,ie=(r,e,t)=>{let n=C(r),o=n+C(e),s=new Uint8Array(o+t.byteLength);return A(r,s,0),A(e,s,n),s.set(t,o),s},ae=Symbol.for("@ipld/js-cid/CID"),q={writable:!1,configurable:!1,enumerable:!0},j={writable:!1,enumerable:!1,configurable:!1},Pe="0.0.0-dev",Je=(r,e)=>{if(r.test(Pe))console.warn(e);else throw new Error(e)},Ge=`CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;var ce={};$(ce,{Hasher:()=>F,from:()=>Qe});var Qe=({name:r,code:e,encode:t})=>new F(r,e,t),F=class{constructor(e,t,n){this.name=e,this.code=t,this.encode=n}digest(e){if(e instanceof Uint8Array){let t=this.encode(e);return t instanceof Uint8Array?N(this.code,t):t.then(n=>N(this.code,n))}else throw Error("Unknown type, must be binary type")}};export{d as CID,re as bytes,R as digest,ce as hasher,k as varint};
//# sourceMappingURL=multiformats.mjs.map