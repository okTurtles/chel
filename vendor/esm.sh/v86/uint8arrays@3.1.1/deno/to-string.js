/* esm.sh - esbuild bundle(uint8arrays@3.1.1/to-string) deno production */
import{bases as l}from"/v86/multiformats@9.9.0/deno/basics.js";function o(e){return globalThis.Buffer!=null?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e}function f(e=0){return globalThis.Buffer!=null&&globalThis.Buffer.allocUnsafe!=null?o(globalThis.Buffer.allocUnsafe(e)):new Uint8Array(e)}function i(e,r,t,a){return{name:e,prefix:r,encoder:{name:e,prefix:r,encode:t},decoder:{decode:a}}}var u=i("utf8","u",e=>"u"+new TextDecoder("utf8").decode(e),e=>new TextEncoder().encode(e.substring(1))),n=i("ascii","a",e=>{let r="a";for(let t=0;t<e.length;t++)r+=String.fromCharCode(e[t]);return r},e=>{e=e.substring(1);let r=f(e.length);for(let t=0;t<e.length;t++)r[t]=e.charCodeAt(t);return r}),c={utf8:u,"utf-8":u,hex:l.base16,latin1:n,ascii:n,binary:n,...l},s=c;function p(e,r="utf8"){let t=s[r];if(!t)throw new Error(`Unsupported encoding "${r}"`);return(r==="utf8"||r==="utf-8")&&globalThis.Buffer!=null&&globalThis.Buffer.from!=null?globalThis.Buffer.from(e.buffer,e.byteOffset,e.byteLength).toString("utf8"):t.encoder.encode(e).substring(1)}export{p as toString};
//# sourceMappingURL=to-string.js.map